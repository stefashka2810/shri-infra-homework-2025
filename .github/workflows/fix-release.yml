  name: Fix Release

  on:
    workflow_dispatch:
      inputs:
        version:
          description: 'Номер релиза'
          required: true

  env:
    APP_NAME: app
    REGISTRY_HOST: cr.yandex
    REESTR_ID: crpvn4spj16vplr31itj

  jobs:
    lint-test:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout release branch
          uses: actions/checkout@v4
          with:
            ref: releases/${{ github.event.inputs.version }}

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 20

        - name: Install dependencies
          run: npm ci

        - name: Lint code
          run: npm run lint

        - name: Run tests
          run: npm test

    build-and-push-fix:
      needs: lint-test
      runs-on: ubuntu-latest
      steps:
        - name: Checkout release branch
          uses: actions/checkout@v4
          with:
            ref: releases/${{ github.event.inputs.version }}

        - name: Authenticate to Yandex Container Registry
          run: |
            printf '%s' "${{ secrets.YCR_TOKEN }}" \
              | docker login --username oauth --password-stdin "$REGISTRY_HOST"

        - name: Build & Push Fix Docker image
          run: |
            VERSION=${{ github.event.inputs.version }}
            FIX_NUM=${{ github.run_number }}
            IMAGE_PATH="$REGISTRY_HOST/$REESTR_ID/$APP_NAME"
            docker build \
              -t "$IMAGE_PATH:${VERSION}_fix${FIX_NUM}" \
              -t "$IMAGE_PATH:latest" .
            docker push "$IMAGE_PATH:${VERSION}_fix${FIX_NUM}"
            docker push "$IMAGE_PATH:latest"

    tag-and-comment:
      needs: build-and-push-fix
      runs-on: ubuntu-latest
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      steps:
        - name: Checkout release branch
          uses: actions/checkout@v4
          with:
            ref: releases/${{ github.event.inputs.version }}

        - name: Set Git committer identity
          run: |
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"

        - name: Create fix release tag
          run: |
            VERSION=${{ github.event.inputs.version }}
            FIX_NUM=${{ github.run_number }}
            TAG="${VERSION}_fix${FIX_NUM}"
            git tag -a "$TAG" -m "Fix release $TAG"
            git push origin "$TAG"

        - name: Find original release issue
          id: find_issue
          run: |
            ISSUE_NUMBER=$(gh issue list --state all --search "Release v${{ github.event.inputs.version }}" --json number --jq '.[0].number')
            echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

        - name: Comment on release issue
          run: |
            VERSION=${{ github.event.inputs.version }}
            FIX_NUM=${{ github.run_number }}
            TAG="${VERSION}_fix${FIX_NUM}"
            IMAGE_PATH="$REGISTRY_HOST/$REESTR_ID/$APP_NAME"
            PREV_FIX=$((FIX_NUM - 1))
            PREV_TAG="${VERSION}_fix${PREV_FIX}"
            if git rev-parse "$PREV_TAG" >/dev/null 2>&1; then
              RANGE="$PREV_TAG..HEAD"
            else
              RANGE="HEAD"
            fi
            LOG=$(git log "$RANGE" --pretty=format:'- %s (%an)')
            gh issue comment "$ISSUE_NUMBER" \
              --body "Fix $TAG deployed on $(date +'%Y-%m-%d') by @${{ github.actor }}\n\nCommits:\n${LOG}\n\nDocker images:\n- $IMAGE_PATH:$TAG\n- $IMAGE_PATH:latest"